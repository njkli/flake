        # let
          #   cmd = "virsh -c qemu:///system";
          # in
          # ${cmd} pool-define
          # ${cmd} pool-start
          # ${qemu}/bin/qemu-img create -f qcow2 -b ${bootDisk}/disk.img $TMPDIR/disk.img || exit 1
          # vol-create-as --pool default --format qcow2 --name withBstore.qcow2 --allocation 0 --capacity 60M --backing-vol bootDisk-${config.system.name}.qcow2

          # attach-disk --domain xml_test --sourcetype file --source /var/lib/libvirt/images/vol111.qcow2 --targetbus virtio --target vdb --driver qemu --subdriver qcow2 --type disk --persistent

          #

xmlStr = pkgs.writeTextDir "resources/xmlStr.txt"
        ''
          /domain/@type=kvm
          /domain/name=${config.system.name}
          /domain/memory/@unit=MB
          /domain/memory=${toString config.virtualisation.memorySize}
          /domain/currentMemory/@unit=MB
          /domain/currentMemory=${toString config.virtualisation.memorySize}
          /domain/vcpu/@placement=static
          /domain/vcpu=${toString config.virtualisation.cores}

          /domain/os/type/@arch=x86_64
          /domain/os/type/@machine=pc-q35-5.1
          /domain/os/type=hvm

          /domain/os/loader/@readonly=yes
          /domain/os/loader/@type=pflash
          /domain/os/loader=/run/libvirt/nix-ovmf/OVMF_CODE.fd
          /domain/os/boot/@dev=hd

          /domain/features/acpi
          /domain/features/apic
          /domain/features/vmport/@state=off
          /domain/cpu/@mode=host-model
          /domain/cpu/@check=partial
          /domain/cpu/numa/cell/@id=0
          /domain/cpu/numa/cell/@cpus=0-${toString (config.virtualisation.cores - 1)}
          /domain/cpu/numa/cell/@memory=${toString config.virtualisation.memorySize}
          /domain/cpu/numa/cell/@unit=MB
          /domain/cpu/numa/cell/@memAccess=shared
          /domain/devices/emulator=/run/libvirt/nix-emulators/qemu-system-x86_64

          /domain/devices/filesystem/@type=mount
          /domain/devices/filesystem/@accessmode=passthrough
          /domain/devices/filesystem/driver/@type=virtiofs
          /domain/devices/filesystem/driver/@queue=1024
          /domain/devices/filesystem/binary/@path=/nix/store/zvb819cx76gsaln62q8w6gvqvwjby03n-qemu-5.1.0/libexec/virtiofsd
          /domain/devices/filesystem/binary/@xattr=on
          /domain/devices/filesystem/source/@dir=/nix/store
          /domain/devices/filesystem/target/@dir=store
          /domain/devices/filesystem/readonly
          /domain/devices/filesystem

          /domain/devices/filesystem/@type=mount
          /domain/devices/filesystem/@accessmode=passthrough
          /domain/devices/filesystem/driver/@type=virtiofs
          /domain/devices/filesystem/driver/@queue=1024
          /domain/devices/filesystem/binary/@path=/nix/store/zvb819cx76gsaln62q8w6gvqvwjby03n-qemu-5.1.0/libexec/virtiofsd
          /domain/devices/filesystem/binary/@xattr=on
          /domain/devices/filesystem/source/@dir=/tmp_dir/xchg
          /domain/devices/filesystem/target/@dir=xchg
          /domain/devices/filesystem

          /domain/devices/filesystem/@type=mount
          /domain/devices/filesystem/@accessmode=passthrough
          /domain/devices/filesystem/driver/@type=virtiofs
          /domain/devices/filesystem/driver/@queue=1024
          /domain/devices/filesystem/binary/@path=/nix/store/zvb819cx76gsaln62q8w6gvqvwjby03n-qemu-5.1.0/libexec/virtiofsd
          /domain/devices/filesystem/binary/@xattr=on
          /domain/devices/filesystem/source/@dir=/tmp_dir/xchg
          /domain/devices/filesystem/target/@dir=shared

          /domain/devices/disk/@type=file
          /domain/devices/disk/@device=disk
          /domain/devices/disk/driver/@name=qemu
          /domain/devices/disk/driver/@type=qcow2
          /domain/devices/disk/source/@file=/var/lib/libvirt/images/win10games.qcow2
          /domain/devices/disk/target/@dev=vda
          /domain/devices/disk/target/@bus=virtio

          /domain/devices/interface/@type=network
          /domain/devices/interface/source/@network=default
          /domain/devices/interface/model/@type=virtio

          /domain/devices/serial/@type=pty
          /domain/devices/serial/target/@type=isa-serial
          /domain/devices/serial/target/@port=0
          /domain/devices/serial/target/model/@name=isa-serial

          /domain/devices/console/@type=pty
          /domain/devices/console/target/@type=serial
          /domain/devices/console/target/@port=0

          /domain/devices/channel/@type=unix
          /domain/devices/channel/target/@type=virtio
          /domain/devices/channel/target/@name=org.qemu.guest_agent.0
          /domain/devices/channel

          /domain/devices/channel/@type=spicevmc
          /domain/devices/channel/target/@type=virtio
          /domain/devices/channel/target/@name=com.redhat.spice.0

          /domain/devices/input/@type=tablet
          /domain/devices/input/@bus=usb
          /domain/devices/input
          /domain/devices/input/@type=mouse
          /domain/devices/input/@bus=ps2
          /domain/devices/input
          /domain/devices/input/@type=keyboard
          /domain/devices/input/@bus=ps2

          /domain/devices/graphics/@type=spice
          /domain/devices/graphics/@autoport=yes
          /domain/devices/graphics/listen/@type=address
          /domain/devices/graphics/image/@compression=off

          /domain/devices/sound/@model=ich9

          /domain/devices/video/model/@type=qxl
          /domain/devices/video/model/@ram=65536
          /domain/devices/video/model/@vram=65536
          /domain/devices/video/model/@vgamem=16384
          /domain/devices/video/model/@heads=1
          /domain/devices/video/model/@primary=yes

          /domain/devices/memballoon/@model=virtio

          /domain/devices/rng/@model=virtio
          /domain/devices/rng/backend/@model=random
          /domain/devices/rng/backend=/dev/urandom
        '';

/*
  #! /nix/store/xvvgw9sb8wk6d2c0j3ybn7sll67s3s4z-bash-4.4-p23/bin/bash

  NIX_DISK_IMAGE=$(readlink -f ${NIX_DISK_IMAGE:-./NixOS.qcow2})

  if ! test -e "$NIX_DISK_IMAGE"; then
  /nix/store/lv7r1haqs7v08s5zayqgqva2z8yhyzjs-qemu-6.0.0/bin/qemu-img create -f qcow2 "$NIX_DISK_IMAGE" \
  512M || exit 1
  fi

  # Create a directory for storing temporary data of the running VM.
  if [ -z "$TMPDIR" -o -z "$USE_TMPDIR" ]; then
  TMPDIR=$(mktemp -d nix-vm.XXXXXXXXXX --tmpdir)
  fi

  # Create a directory for exchanging data with the VM.
  mkdir -p $TMPDIR/xchg

  # Create a writable copy/snapshot of the boot disk.
  # A writable boot disk can be booted from automatically.
  /nix/store/lv7r1haqs7v08s5zayqgqva2z8yhyzjs-qemu-6.0.0/bin/qemu-img create -f qcow2 -b /nix/store/27i0yhgzpj3ircbic6vam5hh8hmfci28-nixos-boot-disk/disk.img $TMPDIR/disk.img || exit 1

  NIX_EFI_VARS=$(readlink -f ${NIX_EFI_VARS:-./NixOS-efi-vars.fd})

  # VM needs writable EFI vars
  if ! test -e "$NIX_EFI_VARS"; then
  cp /nix/store/27i0yhgzpj3ircbic6vam5hh8hmfci28-nixos-boot-disk/efi-vars.fd "$NIX_EFI_VARS" || exit 1
  chmod 0644 "$NIX_EFI_VARS" || exit 1
  fi



  cd $TMPDIR
  idx=0


  # Start QEMU.
  exec /nix/store/lv7r1haqs7v08s5zayqgqva2z8yhyzjs-qemu-6.0.0/bin/qemu-kvm -cpu max \
  -name NixOS \
  -m 384 \
  -smp 1 \
  -device virtio-rng-pci \
  -net nic,netdev=user.0,model=virtio -netdev user,id=user.0${QEMU_NET_OPTS:+,$QEMU_NET_OPTS} \
  -virtfs local,path=/nix/store,security_model=none,mount_tag=store \
  -virtfs local,path=$TMPDIR/xchg,security_model=none,mount_tag=xchg \
  -virtfs local,path=${SHARED_DIR:-$TMPDIR/xchg},security_model=none,mount_tag=shared \
  -drive cache=writeback,file=$NIX_DISK_IMAGE,id=drive1,if=none,index=1,werror=report -device virtio-blk-pci,drive=drive1 -drive file=$TMPDIR/disk.img,id=drive2,if=none,index=2,media=disk -device virtio-blk-pci,bootindex=1,drive=drive2 \
  -usb -device usb-tablet,bus=usb-bus.0 -drive if=pflash,format=raw,unit=0,readonly,file=/nix/store/9b8aa9qzjk58p4zx2pj2dq144pla77fa-OVMF-202102-fd/FV/OVMF_CODE.fd -drive if=pflash,format=raw,unit=1,file=$NIX_EFI_VARS \
  $QEMU_OPTS \
  "$@"

  # inherit (wrapLibVirt) imports;
  # options = recursiveUpdate wrapLibVirt.options { virtualisation.libvirtxml = with lib.types; { enable = mkEnableOption "libvirt compatible xml"; }; };
  # config = mkIf cfg.enable (recursiveUpdate wrapLibVirt.config {
  #   virtualisation.useBootLoader = true;
  #   virtualisation.useEFIBoot =
  #     config.boot.loader.systemd-boot.enable ||
  #     config.boot.loader.efi.canTouchEfiVariables;

  #   system.build.libvirt = config.system.build.vm;
  #   system.build.myArgs = pkgs.writeText "args-out" (builtins.toJSON (builtins.attrNames args));
  # });


      all_cmd =
        pkgs.runCommandNoCC "genxml" { buildInputs = with pkgs; [ xml2 xmlformat gnugrep ]; } ''
        mkdir -p $out
        echo ${pkgs.writeText "xmlStr" xmlStr} > $out/location
        cat ${pkgs.writeText "xmlStr" xmlStr} | grep -v '^[[:space:]]*$' | 2xml | xmlformat > $out/output.xml
        cat ${pkgs.writeText "xmlStr" xmlStr} | grep -v '^[[:space:]]*$' > $out/output.2xml
        '';

        test_cmd =
        pkgs.runCommandNoCC "genxml2" { buildInputs = with pkgs; [ xml2 xmlformat gnugrep gnused ]; } ''
        mkdir -p $out
        echo ${pkgs.writeText "xml2str" xml2str} > $out/location
        cat ${pkgs.writeText "xml2str" xml2str} | grep -v '^[[:space:]]*$' | 2xml | xmlformat > $out/output.xml
        cat ${pkgs.writeText "xml2str" xml2str} | grep -v '^[[:space:]]*$' > $out/output.2xml
        '';

        echo ${pkgs.writeText "xml2Str" xml2str} > $out/location1
        cat ${pkgs.writeText "xml2Str" xml2str} | 2xml | xmlformat > $out/output1.xml
        cat ${pkgs.writeText "xml2Str" xml2str} > $out/output1.2xml

        xml2Out = pkgs.writeText "xml2str" (replaceStrings [ "\n" ] [ "" ] xml2str);
        xmlOut = pkgs.writeTextDir "resources/domain_xml.txt" (replaceStrings [ "\n\n" ] [ "\n" ] xmlStr);


            for i in ${concatStringsSep " " (imap0 (idx: drive:  config.system.name + "-disk-" + (toString idx) + ".qcow2") config.virtualisation.qemu.drives)}
            do
              echo $i
            done

            ${optionalString config.virtualisation.useBootLoader ''
            bootDisk=$(cat ${config.system.build.vm}/bin/run-${config.system.name}-vm  | grep 'qcow2 -b ' | awk -F ' ' '{print $6}')
            bootDiskName=bootDisk-${config.system.name}.qcow2
            eval $CMD vol-create-as --pool default --format qcow2 --name $bootDiskName --allocation 0 --capacity 60M
            eval $CMD vol-upload    --pool default --vol $bootDiskName --file $bootDisk
            ''}

      pool = ''
        /pool/@type=dir
        /pool/name=pName
        /pool/target/path=/tmp
        /pool/target/permissions/mode=0711
        /pool/target/permissions/owner=0
        /pool/target/permissions/group=0
      '';

      */
